import { openai } from "@ai-sdk/openai"
import { generateText } from "ai"
import { type NextRequest, NextResponse } from "next/server"

// IMPORTANT: Set the OPENAI_API_KEY environment variable to use this.
// If you don't have one, the route will return a mock response.

export async function POST(req: NextRequest) {
  const { title, audience }: { title: string; audience: string } = await req.json()

  if (!process.env.OPENAI_API_KEY) {
    // Mock response for V0 preview without API key
    const mockDraft = {
      subject: `Mock Draft: ${title}`,
      html: `<p>This is a mock draft for the topic: <strong>${title}</strong>, targeted at an audience of <strong>${audience}</strong>. In a real implementation, this would be a fully-formed HTML newsletter generated by the AI.</p><p>The AI would consider the audience's interests and craft a compelling narrative, complete with calls-to-action and engaging content.</p>`,
      text: `This is a mock draft for the topic: ${title}, targeted at an audience of ${audience}. In a real implementation, this would be a fully-formed text newsletter generated by the AI.`,
    }
    return NextResponse.json(mockDraft)
  }

  const prompt = `You are an expert newsletter writer. Write a draft for a newsletter with the title "${title}". The target audience is ${audience}. The draft should include a compelling subject line, and the body content in both HTML and plain text formats. The HTML should be simple, using paragraphs, bold tags, and links. Return a single JSON object with three keys: "subject", "html", and "text".`

  const { text } = await generateText({
    model: openai("gpt-4o"),
    prompt: prompt,
  })

  // Assuming the AI returns a valid JSON string.
  // In a production app, you'd want to add error handling and validation here.
  return NextResponse.json(JSON.parse(text))
}
